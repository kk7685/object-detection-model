
import torch
from torchvision.models.detection import fasterrcnn_resnet50_fpn
from torchvision.transforms import functional as F
import cv2
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image

# Load COCO category labels
COCO_INSTANCE_CATEGORY_NAMES = [
    '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',
    'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign',
    'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
    'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag',
    'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite',
    'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',
    'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana',
    'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
    'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table',
    'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
    'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock',
    'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]

# Load a pre-trained model
model = fasterrcnn_resnet50_fpn(pretrained=True)
model.eval()

def predict_image(img_path, threshold=0.8):
    # Load image
    img = Image.open(img_path).convert("RGB")
    img_tensor = F.to_tensor(img).unsqueeze(0)

    # Run inference
    with torch.no_grad():
        preds = model(img_tensor)

    # Extract predictions
    pred_classes = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in preds[0]['labels'].numpy()]
    pred_boxes = preds[0]['boxes'].detach().numpy()
    pred_scores = preds[0]['scores'].detach().numpy()

    # Filter by threshold
    pred_t = [score >= threshold for score in pred_scores]
    pred_boxes = pred_boxes[pred_t]
    pred_classes = [pred_classes[i] for i in range(len(pred_t)) if pred_t[i]]

    # Draw boxes
    img_cv = np.array(img)[:, :, ::-1].copy()  # RGB to BGR
    for i, box in enumerate(pred_boxes):
        x1, y1, x2, y2 = box.astype(int)
        label = pred_classes[i]
        cv2.rectangle(img_cv, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(img_cv, label, (x1, y1 - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255), 2)

    # Convert back to RGB for display
    img_cv = img_cv[:, :, ::-1]
    plt.figure(figsize=(10, 6))
    plt.imshow(img_cv)
    plt.axis('off')
    plt.show()

# Example usage
predict_image(r"C:\Users\ADMIN\Pictures\Saved Pictures\car.jpg.webp")  # Replace with your image path
